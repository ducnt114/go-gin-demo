package utils

import (
	"crypto/rand"
	"crypto/sha512"
	"encoding/base64"
	"encoding/hex"

	pbkdf2 "github.com/ctz/go-fastpbkdf2"
)

const (
	// Pbkdf2Iterations sets the amount of iterations used by the PBKDF2 hashing algorithm
	Pbkdf2Iterations int = 15000
	// HashBytes sets the amount of bytes for the hash output from the PBKDF2 / scrypt hashing algorithm
	HashBytes int = 64
	// UniqueKey Key
	UniqueKey = "!!!!"
)

// GenerateSaltPassword return a encoded base64 from random sequence number
func GenerateSaltPassword() (string, error) {
	salt := make([]byte, 64)
	_, err := rand.Read(salt)
	if err != nil {
		return "", err
	}
	return hex.EncodeToString(salt), nil
}

// HashPassword return hashed password generated by Key Derivation Pbkdf2 algorithm
func HashPassword(rawPass, saltPassword string) string {
	key, _ := base64.StdEncoding.DecodeString(saltPassword)
	bytes := pbkdf2.Key([]byte(rawPass+UniqueKey), key, Pbkdf2Iterations, HashBytes, sha512.New)
	return hex.EncodeToString(bytes)
}

// VerifyShaHashedPassword return true if password math hashed password store in database
// or fail if not math
func VerifyShaHashedPassword(password, hashedPassword, saltPassword string) bool {
	return HashPassword(password, saltPassword) == hashedPassword
}
